// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dzip
double dzip(double p, double theta, int y, bool loga);
RcppExport SEXP ziphsmm_dzip(SEXP pSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    __result = Rcpp::wrap(dzip(p, theta, y, loga));
    return __result;
END_RCPP
}
// rzip
arma::vec rzip(int n, double p, double theta);
RcppExport SEXP ziphsmm_rzip(SEXP nSEXP, SEXP pSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    __result = Rcpp::wrap(rzip(n, p, theta));
    return __result;
END_RCPP
}
// rshiftpois
arma::vec rshiftpois(int n, int theta, int shift);
RcppExport SEXP ziphsmm_rshiftpois(SEXP nSEXP, SEXP thetaSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    __result = Rcpp::wrap(rshiftpois(n, theta, shift));
    return __result;
END_RCPP
}
// dshiftpois
double dshiftpois(int x, int theta, int shift, bool loga);
RcppExport SEXP ziphsmm_dshiftpois(SEXP xSEXP, SEXP thetaSEXP, SEXP shiftSEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    __result = Rcpp::wrap(dshiftpois(x, theta, shift, loga));
    return __result;
END_RCPP
}
// dlogp
double dlogp(int x, double p, bool loga);
RcppExport SEXP ziphsmm_dlogp(SEXP xSEXP, SEXP pSEXP, SEXP logaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type loga(logaSEXP);
    __result = Rcpp::wrap(dlogp(x, p, loga));
    return __result;
END_RCPP
}
// rlogp
arma::vec rlogp(int n, double p);
RcppExport SEXP ziphsmm_rlogp(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    __result = Rcpp::wrap(rlogp(n, p));
    return __result;
END_RCPP
}
// multinomrand
arma::vec multinomrand(int n, int k, arma::vec prob, arma::vec label);
RcppExport SEXP ziphsmm_multinomrand(SEXP nSEXP, SEXP kSEXP, SEXP probSEXP, SEXP labelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type label(labelSEXP);
    __result = Rcpp::wrap(multinomrand(n, k, prob, label));
    return __result;
END_RCPP
}
// hsmm_hmm
arma::mat hsmm_hmm(arma::mat omega, arma::mat dm, arma::vec mv);
RcppExport SEXP ziphsmm_hsmm_hmm(SEXP omegaSEXP, SEXP dmSEXP, SEXP mvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mv(mvSEXP);
    __result = Rcpp::wrap(hsmm_hmm(omega, dm, mv));
    return __result;
END_RCPP
}
// hmm_gen
arma::mat hmm_gen(int dim, int M, int ntimes, arma::vec pi, arma::mat a, arma::vec theta, arma::vec zeroprop);
RcppExport SEXP ziphsmm_hmm_gen(SEXP dimSEXP, SEXP MSEXP, SEXP ntimesSEXP, SEXP piSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    __result = Rcpp::wrap(hmm_gen(dim, M, ntimes, pi, a, theta, zeroprop));
    return __result;
END_RCPP
}
// hsmm_gen
arma::mat hsmm_gen(int dim, int M, arma::vec pi, arma::vec theta, arma::vec zeroprop, arma::mat omega, arma::vec p, std::string dt_dist);
RcppExport SEXP ziphsmm_hsmm_gen(SEXP dimSEXP, SEXP MSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP zeropropSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP dt_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    __result = Rcpp::wrap(hsmm_gen(dim, M, pi, theta, zeroprop, omega, p, dt_dist));
    return __result;
END_RCPP
}
// hmm_nllk
arma::vec hmm_nllk(arma::vec parm, int M, arma::vec y, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hmm_nllk(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hmm_nllk(parm, M, y, zeroindex));
    return __result;
END_RCPP
}
// hmm_common_nocov_negloglik
double hmm_common_nocov_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec ntimes, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hmm_common_nocov_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP ntimesSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hmm_common_nocov_negloglik(allparm, M, ally, ntimes, zeroindex));
    return __result;
END_RCPP
}
// hmm_cov_negloglik
arma::vec hmm_cov_negloglik(arma::vec parm, int M, arma::vec y, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hmm_cov_negloglik(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hmm_cov_negloglik(parm, M, y, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex));
    return __result;
END_RCPP
}
// hmm_common_negloglik
double hmm_common_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec ntimes, int ncolcovpi, arma::mat allcovpi, int ncolcovtrans, arma::mat allcovtrans, int ncolcovp1, arma::mat allcovp1, int ncolcovpois, arma::mat allcovpois, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hmm_common_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP ntimesSEXP, SEXP ncolcovpiSEXP, SEXP allcovpiSEXP, SEXP ncolcovtransSEXP, SEXP allcovtransSEXP, SEXP ncolcovp1SEXP, SEXP allcovp1SEXP, SEXP ncolcovpoisSEXP, SEXP allcovpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpi(allcovpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovtrans(allcovtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp1(allcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpois(allcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hmm_common_negloglik(allparm, M, ally, ntimes, ncolcovpi, allcovpi, ncolcovtrans, allcovtrans, ncolcovp1, allcovp1, ncolcovpois, allcovpois, zeroindex));
    return __result;
END_RCPP
}
// hmm_mixed_negloglik
double hmm_mixed_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec ntimes, int ncolcovpi, arma::mat allcovpi, int ncolcovtrans, arma::mat allcovtrans, int ncolcovp1, arma::mat allcovp1, int ncolcovpois, arma::mat allcovpois, int nrand, int B, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hmm_mixed_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP ntimesSEXP, SEXP ncolcovpiSEXP, SEXP allcovpiSEXP, SEXP ncolcovtransSEXP, SEXP allcovtransSEXP, SEXP ncolcovp1SEXP, SEXP allcovp1SEXP, SEXP ncolcovpoisSEXP, SEXP allcovpoisSEXP, SEXP nrandSEXP, SEXP BSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpi(allcovpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovtrans(allcovtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp1(allcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpois(allcovpoisSEXP);
    Rcpp::traits::input_parameter< int >::type nrand(nrandSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hmm_mixed_negloglik(allparm, M, ally, ntimes, ncolcovpi, allcovpi, ncolcovtrans, allcovtrans, ncolcovp1, allcovp1, ncolcovpois, allcovpois, nrand, B, zeroindex));
    return __result;
END_RCPP
}
// hsmm_nllk
arma::vec hsmm_nllk(arma::vec parm, int M, arma::vec trunc, arma::vec y, std::string dt_dist, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hsmm_nllk(SEXP parmSEXP, SEXP MSEXP, SEXP truncSEXP, SEXP ySEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hsmm_nllk(parm, M, trunc, y, dt_dist, zeroindex));
    return __result;
END_RCPP
}
// hsmm_common_nocov_nllk
double hsmm_common_nocov_nllk(arma::vec allparm, int M, arma::vec ally, arma::vec trunc, arma::vec ntimes, std::string dt_dist, arma::vec zeroprop);
RcppExport SEXP ziphsmm_hsmm_common_nocov_nllk(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP truncSEXP, SEXP ntimesSEXP, SEXP dt_distSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    __result = Rcpp::wrap(hsmm_common_nocov_nllk(allparm, M, ally, trunc, ntimes, dt_dist, zeroprop));
    return __result;
END_RCPP
}
// hsmm_cov_nllk
arma::mat hsmm_cov_nllk(arma::vec parm, int M, arma::vec y, arma::vec trunc, std::string dt_dist, arma::vec zeroindex, int ncolcovp, arma::mat covp, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois);
RcppExport SEXP ziphsmm_hsmm_cov_nllk(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP truncSEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP covpSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    __result = Rcpp::wrap(hsmm_cov_nllk(parm, M, y, trunc, dt_dist, zeroindex, ncolcovp, covp, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois));
    return __result;
END_RCPP
}
// hsmm_common_negloglik
double hsmm_common_negloglik(arma::vec allparm, int M, arma::vec ally, arma::vec trunc, arma::vec ntimes, std::string dt_dist, arma::vec zeroindex, int ncolcovp, arma::mat allcovp, int ncolcovpi, arma::mat allcovpi, int ncolcovomega, arma::mat allcovomega, int ncolcovp1, arma::mat allcovp1, int ncolcovpois, arma::mat allcovpois);
RcppExport SEXP ziphsmm_hsmm_common_negloglik(SEXP allparmSEXP, SEXP MSEXP, SEXP allySEXP, SEXP truncSEXP, SEXP ntimesSEXP, SEXP dt_distSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP allcovpSEXP, SEXP ncolcovpiSEXP, SEXP allcovpiSEXP, SEXP ncolcovomegaSEXP, SEXP allcovomegaSEXP, SEXP ncolcovp1SEXP, SEXP allcovp1SEXP, SEXP ncolcovpoisSEXP, SEXP allcovpoisSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type allparm(allparmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ally(allySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp(allcovpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpi(allcovpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovomega(allcovomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovp1(allcovp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type allcovpois(allcovpoisSEXP);
    __result = Rcpp::wrap(hsmm_common_negloglik(allparm, M, ally, trunc, ntimes, dt_dist, zeroindex, ncolcovp, allcovp, ncolcovpi, allcovpi, ncolcovomega, allcovomega, ncolcovp1, allcovp1, ncolcovpois, allcovpois));
    return __result;
END_RCPP
}
// hmm_viterbi
arma::vec hmm_viterbi(arma::vec pi, arma::mat a, arma::vec theta, int M, arma::vec y, arma::vec zeroprop);
RcppExport SEXP ziphsmm_hmm_viterbi(SEXP piSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP MSEXP, SEXP ySEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    __result = Rcpp::wrap(hmm_viterbi(pi, a, theta, M, y, zeroprop));
    return __result;
END_RCPP
}
// hsmm_viterbi
arma::vec hsmm_viterbi(arma::vec y, int M, arma::vec pi, arma::vec theta, arma::mat omega, arma::vec p, arma::vec trunc, std::string dt_dist, arma::vec zeroprop);
RcppExport SEXP ziphsmm_hsmm_viterbi(SEXP ySEXP, SEXP MSEXP, SEXP piSEXP, SEXP thetaSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP truncSEXP, SEXP dt_distSEXP, SEXP zeropropSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroprop(zeropropSEXP);
    __result = Rcpp::wrap(hsmm_viterbi(y, M, pi, theta, omega, p, trunc, dt_dist, zeroprop));
    return __result;
END_RCPP
}
// hmm_cov_viterbi
arma::vec hmm_cov_viterbi(arma::vec parm, int M, arma::vec y, int ncolcovpi, arma::mat covpi, int ncolcovtrans, arma::mat covtrans, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, arma::vec zeroindex);
RcppExport SEXP ziphsmm_hmm_cov_viterbi(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovtransSEXP, SEXP covtransSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP zeroindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovtrans(ncolcovtransSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covtrans(covtransSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    __result = Rcpp::wrap(hmm_cov_viterbi(parm, M, y, ncolcovpi, covpi, ncolcovtrans, covtrans, ncolcovp1, covp1, ncolcovpois, covpois, zeroindex));
    return __result;
END_RCPP
}
// hsmm_cov_viterbi
arma::vec hsmm_cov_viterbi(arma::vec parm, int M, arma::vec y, arma::vec trunc, arma::vec zeroindex, int ncolcovp, arma::mat covp, int ncolcovpi, arma::mat covpi, int ncolcovomega, arma::mat covomega, int ncolcovp1, arma::mat covp1, int ncolcovpois, arma::mat covpois, std::string dt_dist);
RcppExport SEXP ziphsmm_hsmm_cov_viterbi(SEXP parmSEXP, SEXP MSEXP, SEXP ySEXP, SEXP truncSEXP, SEXP zeroindexSEXP, SEXP ncolcovpSEXP, SEXP covpSEXP, SEXP ncolcovpiSEXP, SEXP covpiSEXP, SEXP ncolcovomegaSEXP, SEXP covomegaSEXP, SEXP ncolcovp1SEXP, SEXP covp1SEXP, SEXP ncolcovpoisSEXP, SEXP covpoisSEXP, SEXP dt_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type parm(parmSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zeroindex(zeroindexSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp(ncolcovpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp(covpSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpi(ncolcovpiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpi(covpiSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovomega(ncolcovomegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covomega(covomegaSEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovp1(ncolcovp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covp1(covp1SEXP);
    Rcpp::traits::input_parameter< int >::type ncolcovpois(ncolcovpoisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covpois(covpoisSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_dist(dt_distSEXP);
    __result = Rcpp::wrap(hsmm_cov_viterbi(parm, M, y, trunc, zeroindex, ncolcovp, covp, ncolcovpi, covpi, ncolcovomega, covomega, ncolcovp1, covp1, ncolcovpois, covpois, dt_dist));
    return __result;
END_RCPP
}
